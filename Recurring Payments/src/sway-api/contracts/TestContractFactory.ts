/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.94.8
*/

import { Contract, ContractFactory, decompressBytecode } from "fuels";
import type {
  Provider,
  Account,
  DeployContractOptions,
  DeployContractResult,
} from "fuels";

import { TestContract } from "./TestContract";

const bytecode = decompressBytecode(
  "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"
);

export class TestContractFactory extends ContractFactory {
  static readonly bytecode = bytecode;

  constructor(accountOrProvider: Account | Provider) {
    super(bytecode, TestContract.abi, accountOrProvider);
  }

  deploy<TContract extends Contract = Contract>(
    deployOptions?: DeployContractOptions
  ): Promise<DeployContractResult<TContract>> {
    return super.deploy({
      storageSlots: TestContract.storageSlots,
      ...deployOptions,
    });
  }

  static async deploy(
    wallet: Account,
    options: DeployContractOptions = {}
  ): Promise<DeployContractResult<TestContract>> {
    const factory = new TestContractFactory(wallet);
    return factory.deploy(options);
  }
}
