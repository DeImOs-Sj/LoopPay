/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.94.8
*/

import { Contract, ContractFactory, decompressBytecode } from "fuels";
import type {
  Provider,
  Account,
  DeployContractOptions,
  DeployContractResult,
} from "fuels";

import { TestContract } from "./TestContract";

const bytecode = decompressBytecode(
  "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"
);

export class TestContractFactory extends ContractFactory {
  static readonly bytecode = bytecode;

  constructor(accountOrProvider: Account | Provider) {
    super(bytecode, TestContract.abi, accountOrProvider);
  }

  deploy<TContract extends Contract = Contract>(
    deployOptions?: DeployContractOptions
  ): Promise<DeployContractResult<TContract>> {
    return super.deploy({
      storageSlots: TestContract.storageSlots,
      ...deployOptions,
    });
  }

  static async deploy(
    wallet: Account,
    options: DeployContractOptions = {}
  ): Promise<DeployContractResult<TestContract>> {
    const factory = new TestContractFactory(wallet);
    return factory.deploy(options);
  }
}
